connection_info:
  user: GITLAB_COM_DB_USER
  pass: GITLAB_COM_DB_PASS
  host: GITLAB_COM_DB_HOST
  database: GITLAB_COM_DB_NAME
  port: PG_PORT
tables:
  # resource_label_events:
  #   import_db: GITLAB_DB
  #   import_query: >
  #     SELECT id
  #     , action
  #     , issue_id
  #     , merge_request_id
  #     , epic_id
  #     , label_id
  #     , user_id
  #     , created_at
  #     , cached_markdown_version
  #     , reference
  #     , reference_html
  #     FROM resource_label_events
  #   export_schema: 'gitlab_com'
  #   export_table: 'resource_label_events'
  #   export_table_primary_key: id
  epics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , group_id
      , author_id
      , assignee_id
      , updated_by_id
      , last_edited_by_id
      , lock_version
      , start_date
      , end_date
      , last_edited_at
      , created_at
      , updated_at
      , title
      , description
      , state_id
      , closed_at
      , parent_id
      , relative_position
      , start_date_sourcing_epic_id
      , external_key
      , confidential
      FROM epics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'epics'
    export_table_primary_key: id
  oauth_access_tokens:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , resource_owner_id
      , application_id
      , expires_in
      , revoked_at
      , created_at
      , scopes
      FROM oauth_access_tokens
    export_schema: 'gitlab_com'
    export_table: 'oauth_access_tokens'
    export_table_primary_key: id
  members:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , access_level
      , source_id
      , source_type
      , user_id
      , notification_level
      , type
      , created_at
      , created_by_id
      , invite_email
      , invite_accepted_at
      , requested_at
      , CASE WHEN expires_at > '2262-01-01' THEN '2262-01-01' ELSE expires_at END AS expires_at
      , ldap
      , override
      FROM members
    export_schema: 'gitlab_com'
    export_table: 'members'
    export_table_primary_key: id
    advanced_metadata: true
  approvals:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , merge_request_id
      , user_id
      , created_at
      , updated_at
      FROM approvals
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'approvals'
    export_table_primary_key: id
  ci_build_trace_chunks:
    import_db: GITLAB_DB
    import_query: >
      SELECT build_id
      , chunk_index
      , data_store
      , raw_data
      FROM ci_build_trace_chunks
    export_schema: 'gitlab_dotcom'
    export_table: ci_build_trace_chunks
    export_table_primary_key: build_id
  ci_build_trace_section_names:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , name
      FROM ci_build_trace_section_names
    export_schema: 'gitlab_dotcom'
    export_table: ci_build_trace_section_names
    export_table_primary_key: id
  ci_pipeline_schedule_variables:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , key
      , pipeline_schedule_id
      , created_at
      , updated_at
      , variable_type
      FROM ci_pipeline_schedule_variables
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_pipeline_schedule_variables
    export_table_primary_key: id
  ci_pipeline_schedules:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , description
      , ref
      , cron
      , cron_timezone
      , next_run_at
      , project_id
      , owner_id
      , active
      , created_at
      , updated_at
      FROM ci_pipeline_schedules
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_pipeline_schedules
    export_table_primary_key: id
  ci_job_artifacts:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , job_id
      , file_type
      , size
      , created_at
      , updated_at
      , CASE WHEN expire_at > '2262-01-01' THEN '2262-01-01' ELSE expire_at END AS expire_at
      , file
      , file_store
      , file_format
      , file_location
      FROM ci_job_artifacts
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    additional_filtering: AND created_at NOT IN ( '0001-01-01 00:00:00+00', '1000-01-01 00:00:00+00', '10000-01-01 00:00:00+00')
    export_schema: 'gitlab_dotcom'
    export_table: ci_job_artifacts
    export_table_primary_key: id
  ci_pipeline_chat_data:
    import_db: GITLAB_DB
    import_query: >
      SELECT pipeline_id
      , chat_name_id
      , response_url
      FROM ci_pipeline_chat_data
    export_schema: 'gitlab_dotcom'
    export_table: ci_pipeline_chat_data
    export_table_primary_key: pipeline_id
  ci_pipeline_variables:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , key
      , pipeline_id
      , variable_type
      FROM ci_pipeline_variables
    export_schema: 'gitlab_dotcom'
    export_table: ci_pipeline_variables
    export_table_primary_key: id
  events:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , author_id
      , target_id
      , created_at
      , updated_at
      , action
      , target_type
      FROM events
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'events'
    export_table_primary_key: id
  approver_groups:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , target_type
      , group_id
      , created_at
      , updated_at
      FROM approver_groups
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'approver_groups'
    export_table_primary_key: id
  approval_merge_request_rules:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , merge_request_id
      , approvals_required
      , code_owner
      , name
      , rule_type
      , report_type
      FROM approval_merge_request_rules
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'approval_merge_request_rules'
    export_table_primary_key: id
  audit_events:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , author_id
      , type
      , entity_id
      , entity_type
      , details
      , created_at
      , updated_at
      FROM audit_events
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'audit_events'
    export_table_primary_key: id
  board_assignees:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , board_id
      , assignee_id
      FROM board_assignees
    export_schema: 'gitlab_com'
    export_table: 'board_assignees'
    export_table_primary_key: id
  board_labels:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , board_id
      , label_id
      FROM board_labels
    export_schema: 'gitlab_com'
    export_table: 'board_labels'
    export_table_primary_key: id
  boards:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , created_at
      , updated_at
      , milestone_id
      , group_id
      , weight
      FROM boards
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'boards'
    export_table_primary_key: id
  ci_stages:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , pipeline_id
      , created_at
      , updated_at
      , name
      , status
      , lock_version
      , position
      FROM ci_stages
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_stages
    export_table_primary_key: id
  ci_trigger_requests:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , trigger_id
      , variables
      , created_at
      , updated_at
      , commit_id
      FROM ci_trigger_requests
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_trigger_requests
    export_table_primary_key: id
  ci_triggers:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , project_id
      , owner_id
      , description
      FROM ci_triggers
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_triggers
    export_table_primary_key: id
  ci_variables:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , key
      , project_id
      , protected
      , environment_scope
      , masked
      , variable_type
      FROM ci_variables
    export_schema: 'gitlab_dotcom'
    export_table: ci_variables
    export_table_primary_key: id
  ci_pipelines:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , ref
      , tag
      , yaml_errors
      , committed_at
      , project_id
      , status
      , started_at
      , finished_at
      , duration
      , user_id
      , lock_version
      , auto_canceled_by_id
      , pipeline_schedule_id
      , source
      , config_source
      , protected
      , failure_reason
      , iid
      , merge_request_id
      FROM ci_pipelines
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'ci_pipelines'
    export_table_primary_key: id
  cluster_groups:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , group_id
      FROM cluster_groups
    export_schema: 'gitlab_com'
    export_table: 'cluster_groups'
    export_table_primary_key: id
  cluster_projects:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , project_id
      , created_at
      , updated_at
      FROM cluster_projects
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'cluster_projects'
    export_table_primary_key: id
  clusters:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , provider_type
      , platform_type
      , created_at
      , updated_at
      , enabled
      , name
      , environment_scope
      , cluster_type
      , domain
      , managed
      FROM clusters
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters'
    export_table_primary_key: id
  clusters_applications_cert_managers:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , status
      , version
      , created_at
      , updated_at
      , status_reason
      FROM clusters_applications_cert_managers
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_cert_managers'
    export_table_primary_key: id
  clusters_applications_crossplane:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , status
      , version
      , stack
      , created_at
      , updated_at
      , status_reason
      FROM clusters_applications_crossplane
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_crossplane'
    export_table_primary_key: id
  clusters_applications_elastic_stacks:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , status
      , version
      , created_at
      , updated_at
      , status_reason
      FROM clusters_applications_elastic_stacks
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_elastic_stacks'
    export_table_primary_key: id
  clusters_applications_helm:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , created_at
      , updated_at
      , status
      , version
      , status_reason
      FROM clusters_applications_helm
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_helm'
    export_table_primary_key: id
  clusters_applications_ingress:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , created_at
      , updated_at
      , status
      , ingress_type
      , version
      , cluster_ip
      , status_reason
      , external_ip
      , external_hostname
      FROM clusters_applications_ingress
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_ingress'
    export_table_primary_key: id
  clusters_applications_jupyter:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , oauth_application_id
      , status
      , version
      , hostname
      , created_at
      , updated_at
      , status_reason
      FROM clusters_applications_jupyter
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_jupyter'
    export_table_primary_key: id
  clusters_applications_knative:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , created_at
      , updated_at
      , status
      , version
      , hostname
      , status_reason
      , external_ip
      , external_hostname
      FROM clusters_applications_knative
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_knative'
    export_table_primary_key: id
  clusters_applications_prometheus:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , status
      , version
      , status_reason
      , created_at
      , updated_at
      , last_update_started_at
      FROM clusters_applications_prometheus
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_prometheus'
    export_table_primary_key: id
  clusters_applications_runners:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , cluster_id
      , runner_id
      , status
      , created_at
      , updated_at
      , version
      , status_reason
      , privileged
      FROM clusters_applications_runners
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_applications_runners'
    export_table_primary_key: id
  clusters_kubernetes_namespaces:
    import_db: GITLAB_DB
    import_query: >
      SELECT cluster_id
      , project_id
      , cluster_project_id
      , created_at
      , updated_at
      , namespace
      , service_account_name
      FROM clusters_kubernetes_namespaces
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'clusters_kubernetes_namespaces'
    export_table_primary_key: cluster_id
  deployment_merge_requests:
    import_db: GITLAB_DB
    import_query: >
      SELECT deployment_id
      , merge_request_id
      , CONCAT(deployment_id,'_',merge_request_id) as deployment_merge_request_id
      FROM deployment_merge_requests
    export_schema: 'gitlab_com'
    export_table: 'deployment_merge_requests'
    export_table_primary_key: CONCAT(deployment_id,'_',merge_request_id)
  deployments:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , project_id
      , environment_id
      , ref
      , tag
      , sha
      , user_id
      , deployable_id
      , deployable_type
      , created_at
      , updated_at
      , on_stop
      , status
      , finished_at
      , cluster_id
      FROM deployments
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'deployments'
    export_table_primary_key: id
  design_management_designs:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , issue_id
      , filename
      FROM design_management_designs
    export_schema: 'gitlab_com'
    export_table: 'design_management_designs'
    export_table_primary_key: CONCAT(issue_id,'_',filename)
  design_management_designs_versions:
    import_db: GITLAB_DB
    import_query: >
      SELECT CONCAT(design_id,'_', version_id) AS id
      , design_id
      , version_id
      , event
      FROM design_management_designs_versions
    export_schema: 'gitlab_com'
    export_table: 'design_management_designs_versions'
    export_table_primary_key: CONCAT(design_id,'_', version_id)
  design_management_versions:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , CAST(sha AS VARCHAR) AS sha
      , issue_id
      , created_at
      , author_id
      FROM design_management_versions
    export_schema: 'gitlab_com'
    export_table: 'design_management_versions'
    export_table_primary_key: CONCAT(sha,'_', issue_id)
  elasticsearch_indexed_namespaces:
    import_db: GITLAB_DB
    import_query: >
      SELECT created_at
      , updated_at
      , namespace_id
      FROM elasticsearch_indexed_namespaces
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'elasticsearch_indexed_namespaces'
    export_table_primary_key: namespace_id
  environments:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , name
      , created_at
      , updated_at
      , external_url
      , environment_type
      , state
      , slug
      FROM environments
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
          AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'environments'
    export_table_primary_key: id
    advanced_metadata: true
  epic_issues:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , epic_id
      , issue_id
      , relative_position
      FROM epic_issues
    export_schema: 'gitlab_com'
    export_table: 'epic_issues'
    export_table_primary_key: id
  epic_metrics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , epic_id
      , created_at
      , updated_at
      FROM epic_metrics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'epic_metrics'
    export_table_primary_key: id
  gitlab_subscription_histories:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , gitlab_subscription_created_at
      , gitlab_subscription_updated_at
      , start_date
      , end_date
      , trial_starts_on
      , trial_ends_on
      , namespace_id
      , hosted_plan_id
      , max_seats_used
      , seats
      , trial
      , change_type
      , gitlab_subscription_id
      , created_at
      FROM gitlab_subscription_histories
    export_schema: 'gitlab_com'
    export_table: 'gitlab_subscription_histories'
    export_table_primary_key: id
  gitlab_subscriptions:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , start_date
      , end_date
      , trial_starts_on
      , trial_ends_on
      , namespace_id
      , hosted_plan_id
      , max_seats_used
      , seats
      , trial
      FROM gitlab_subscriptions
    export_schema: 'gitlab_com'
    export_table: 'gitlab_subscriptions'
    export_table_primary_key: id
    advanced_metadata: true
  group_group_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , shared_group_id
      , shared_with_group_id
      , expires_at
      , group_access
      FROM group_group_links
    export_schema: 'gitlab_com'
    export_table: 'group_group_links'
    export_table_primary_key: id
    advanced_metadata: true
  issues:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , title
      , author_id
      , project_id
      , created_at
      , updated_at
      , confidential
      , description
      , milestone_id
      , updated_by_id
      , weight
      , due_date
      , moved_to_id
      , lock_version
      , time_estimate
      , last_edited_at
      , last_edited_by_id
      , discussion_locked
      , closed_at
      , closed_by_id
      , relative_position
      , service_desk_reply_to
      , state_id
      , duplicated_to_id
      , promoted_to_epic_id
      FROM issues
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    additional_filtering: AND created_at NOT IN ( '0001-01-01 00:00:00+00', '1000-01-01 00:00:00+00', '10000-01-01 00:00:00+00')
    export_schema: 'gitlab_com'
    export_table: 'issues'
    export_table_primary_key: id
  labels:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , title
      , color
      , project_id
      , created_at
      , updated_at
      , template
      , type
      , group_id
      FROM labels
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'labels'
    export_table_primary_key: id
  lfs_objects_projects:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , lfs_object_id
      , project_id
      , created_at
      , updated_at
      , repository_type
      FROM lfs_objects_projects
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'lfs_objects_projects'
    export_table_primary_key: id
  identities:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , extern_uid
      , provider
      , user_id
      , created_at
      , updated_at
      , secondary_extern_uid
      , saml_provider_id
      FROM identities
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'identities'
    export_table_primary_key: id
  issue_assignees:
    import_db: GITLAB_DB
    import_query: >
      SELECT user_id
      , issue_id
      FROM issue_assignees
    export_schema: 'gitlab_com'
    export_table: 'issue_assignees'
    export_table_primary_key: user_id
  issue_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , source_id
      , target_id
      , created_at
      , updated_at
      FROM issue_links
    export_schema: 'gitlab_com'
    export_table: 'issue_links'
    export_table_primary_key: id
    advanced_metadata: true
  issue_metrics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , issue_id
      , first_mentioned_in_commit_at
      , first_associated_with_milestone_at
      , first_added_to_board_at
      , created_at
      , updated_at
      FROM issue_metrics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'issue_metrics'
    export_table_primary_key: id
  keys:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , created_at
      , updated_at
      , type
      , public
      , last_used_at
      FROM keys
    export_schema: 'gitlab_com'
    export_table: 'keys'
    export_table_primary_key: id
  label_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , label_id
      , target_id
      , target_type
      , created_at
      , updated_at
      FROM label_links
    export_schema: 'gitlab_com'
    export_table: 'label_links'
    export_table_primary_key: id
    advanced_metadata: true
  label_priorities:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , label_id
      , priority
      , created_at
      , updated_at
      FROM label_priorities
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'label_priorities'
    export_table_primary_key: id
  licenses:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      FROM licenses
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'licenses'
    export_table_primary_key: id
  lists:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , board_id
      , label_id
      , list_type
      , position
      , created_at
      , updated_at
      , user_id
      , milestone_id
      , max_issue_count
      , max_issue_weight
      , limit_metric
      FROM lists
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'lists'
    export_table_primary_key: id
  merge_requests:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , target_branch
      , source_branch
      , source_project_id
      , author_id
      , assignee_id
      , title
      , created_at
      , updated_at
      , milestone_id
      , state_id
      , merge_status
      , target_project_id
      , updated_by_id
      , merge_error
      , merge_params
      , merge_when_pipeline_succeeds
      , merge_user_id
      , approvals_before_merge
      , lock_version
      , time_estimate
      , squash
      , last_edited_at
      , last_edited_by_id
      , head_pipeline_id
      , discussion_locked
      , latest_merge_request_diff_id
      , allow_maintainer_to_push
      FROM merge_requests
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_requests'
    export_table_primary_key: id
  merge_request_diffs:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , state
      , merge_request_id
      , created_at
      , updated_at
      , base_commit_sha
      , real_size
      , head_commit_sha
      , start_commit_sha
      , commits_count
      FROM merge_request_diffs
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_request_diffs'
    export_table_primary_key: id
  merge_request_metrics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , merge_request_id
      , latest_build_started_at
      , latest_build_finished_at
      , first_deployed_to_production_at
      , merged_at
      , created_at
      , updated_at
      , pipeline_id
      , merged_by_id
      , latest_closed_by_id
      , latest_closed_at
      , first_comment_at
      , first_commit_at
      , last_commit_at
      , diff_size
      , modified_paths_size
      , commits_count
      , first_approved_at
      , first_reassigned_at
      , added_lines
      , removed_lines
      FROM merge_request_metrics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_request_metrics'
    export_table_primary_key: id
  merge_requests_closing_issues:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , merge_request_id
      , issue_id
      , created_at
      , updated_at
      FROM merge_requests_closing_issues
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_requests_closing_issues'
    export_table_primary_key: id
  milestones:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , title
      , description
      , project_id
      , due_date
      , created_at
      , updated_at
      , state
      , start_date
      , group_id
      FROM milestones
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'milestones'
    export_table_primary_key: id
  namespace_statistics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , namespace_id
      , shared_runners_seconds
      , shared_runners_seconds_last_reset
      FROM namespace_statistics
    export_schema: 'gitlab_com'
    export_table: 'namespace_statistics'
    export_table_primary_key: id
  namespaces:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , name
      , path
      , owner_id
      , created_at
      , updated_at
      , type
      , avatar
      , membership_lock
      , share_with_group_lock
      , visibility_level
      , request_access_enabled
      , ldap_sync_status
      , ldap_sync_error
      , ldap_sync_last_update_at
      , ldap_sync_last_successful_update_at
      , ldap_sync_last_sync_at
      , lfs_enabled
      , parent_id
      , shared_runners_minutes_limit
      , repository_size_limit
      , require_two_factor_authentication
      , two_factor_grace_period
      , project_creation_level
      , auto_devops_enabled
      FROM namespaces
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'namespaces'
    export_table_primary_key: id
  namespace_root_storage_statistics:
    import_db: GITLAB_DB
    import_query: >
      SELECT namespace_id
      , repository_size
      , lfs_objects_size
      , wiki_size
      , build_artifacts_size
      , storage_size
      , packages_size
      , updated_at
      FROM namespace_root_storage_statistics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'namespace_root_storage_statistics'
    export_table_primary_key: namespace_id
  notes:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , note
      , noteable_type
      , author_id
      , created_at
      , updated_at
      , project_id
      , attachment
      , line_code
      , commit_id
      , noteable_id
      , system
      , st_diff
      , updated_by_id
      , type
      , position
      , original_position
      , resolved_at
      , resolved_by_id
      , discussion_id
      , note_html
      , cached_markdown_version
      , change_position
      , resolved_by_push
      FROM notes
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'notes'
    export_table_primary_key: id
  notification_settings:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , source_id
      , source_type
      , level
      , created_at
      , updated_at
      , new_note
      , new_issue
      , reopen_issue
      , close_issue
      , reassign_issue
      , new_merge_request
      , reopen_merge_request
      , close_merge_request
      , reassign_merge_request
      , merge_merge_request
      , failed_pipeline
      , success_pipeline
      FROM notification_settings
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'notification_settings'
    export_table_primary_key: id
  pages_domains:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , certificate
      , domain
      , CAST(verified_at AS VARCHAR) AS verified_at
      , verification_code
      , CAST(enabled_until AS VARCHAR) AS enabled_until
      , CAST(remove_at AS VARCHAR) AS remove_at
      , auto_ssl_enabled
      , CAST(certificate_valid_not_before AS VARCHAR) AS certificate_valid_not_before
      , CAST(certificate_valid_not_after AS VARCHAR) AS certificate_valid_not_after
      , certificate_source
      FROM pages_domains
    export_schema: 'gitlab_com'
    export_table: 'pages_domains'
    export_table_primary_key: id
  plans:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , name
      , title
      FROM plans
    export_schema: 'gitlab_com'
    export_table: 'plans'
    export_table_primary_key: id
  project_authorizations:
    import_db: GITLAB_DB
    import_query: >
      SELECT user_id
      , project_id
      , access_level
      FROM project_authorizations
    export_schema: 'gitlab_com'
    export_table: 'project_authorizations'
    export_table_primary_key: user_id
  project_auto_devops:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , created_at
      , updated_at
      , enabled
      FROM project_auto_devops
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_auto_devops'
    export_table_primary_key: id
  project_custom_attributes:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , project_id
      , key
      FROM project_custom_attributes
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_custom_attributes'
    export_table_primary_key: id
  project_features:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , merge_requests_access_level
      , issues_access_level
      , wiki_access_level
      , snippets_access_level
      , builds_access_level
      , created_at
      , updated_at
      , repository_access_level
      FROM project_features
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_features'
    export_table_primary_key: id
  project_group_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , group_id
      , created_at
      , updated_at
      , group_access
      , expires_at
      FROM project_group_links
    export_schema: 'gitlab_com'
    export_table: 'project_group_links'
    export_table_primary_key: id
    advanced_metadata: true
  project_import_data:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      FROM project_import_data
    export_schema: 'gitlab_com'
    export_table: 'project_import_data'
    export_table_primary_key: id
  project_mirror_data:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , retry_count
      , last_update_started_at
      , last_update_scheduled_at
      , next_execution_timestamp
      FROM project_mirror_data
    export_schema: 'gitlab_com'
    export_table: 'project_mirror_data'
    export_table_primary_key: id
  project_repository_states:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , last_repository_verification_failure
      , last_wiki_verification_failure
      FROM project_repository_states
    export_schema: 'gitlab_com'
    export_table: 'project_repository_states'
    export_table_primary_key: id
  project_statistics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , namespace_id
      , commit_count
      , storage_size
      , repository_size
      , lfs_objects_size
      , build_artifacts_size
      , shared_runners_seconds
      , shared_runners_seconds_last_reset
      , packages_size
      , wiki_size
      FROM project_statistics
    export_schema: 'gitlab_com'
    export_table: 'project_statistics'
    export_table_primary_key: id
  projects:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , name
      , path
      , description
      , created_at
      , updated_at
      , creator_id
      , namespace_id
      , last_activity_at
      , import_url
      , visibility_level
      , archived
      , avatar
      , merge_requests_template
      , star_count
      , merge_requests_rebase_enabled
      , import_type
      , import_source
      , approvals_before_merge
      , reset_approvals_on_push
      , merge_requests_ff_only_enabled
      , issues_template
      , mirror
      , mirror_user_id
      , shared_runners_enabled
      , build_coverage_regex
      , build_allow_git_fetch
      , build_timeout
      , mirror_trigger_builds
      , pending_delete
      , public_builds
      , last_repository_check_failed
      , last_repository_check_at
      , container_registry_enabled
      , only_allow_merge_if_pipeline_succeeds
      , has_external_issue_tracker
      , repository_storage
      , repository_read_only
      , request_access_enabled
      , has_external_wiki
      , ci_config_path
      , lfs_enabled
      , only_allow_merge_if_all_discussions_are_resolved
      , repository_size_limit
      , printing_merge_request_link_enabled
      , auto_cancel_pending_pipelines
      , service_desk_enabled
      , delete_error
      , last_repository_updated_at
      , disable_overriding_approvers_per_merge_request
      , storage_version
      , resolve_outdated_diff_discussions
      , remote_mirror_available_overridden
      , only_mirror_protected_branches
      , pull_mirror_available_overridden
      , mirror_overwrites_diverged_branches
      , external_authorization_classification_label
      FROM projects
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'projects'
    export_table_primary_key: id
  protected_branches:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , name
      , created_at
      , updated_at
      , code_owner_approval_required
      FROM protected_branches
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'protected_branches'
    export_table_primary_key: id
  push_rules:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , force_push_regex
      , delete_branch_regex
      , commit_message_regex
      , deny_delete_tag
      , project_id
      , created_at
      , updated_at
      , author_email_regex
      , member_check
      , file_name_regex
      , is_sample
      , max_file_size
      , prevent_secrets
      , branch_name_regex
      , reject_unsigned_commits
      , commit_committer_check
      , regexp_uses_re2
      , commit_message_negative_regex
      FROM push_rules
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'push_rules'
    export_table_primary_key: id
  resource_milestone_events:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , issue_id
      , merge_request_id
      , milestone_id
      , action
      , state
      , created_at
      FROM resource_milestone_events
      WHERE created_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'resource_milestone_events'
    export_table_primary_key: id
#  resource_state_events:
#    import_db: GITLAB_DB
#    import_query: >
#      SELECT id
#      , user_id
#      , issue_id
#      , merge_request_id
#      , state
#      , created_at
#      FROM resource_state_events
#      WHERE created_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
#        AND '{EXECUTION_DATE}'::timestamp
#    export_schema: 'gitlab_com'
#    export_table: 'resource_state_events'
#    export_table_primary_key: id
  resource_weight_events:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , issue_id
      , weight
      , created_at
      FROM resource_weight_events
      WHERE created_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'resource_weight_events'
    export_table_primary_key: id
  saml_providers:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , group_id
      , enabled
      , certificate_fingerprint
      , sso_url
      , enforced_sso
      , enforced_group_managed_accounts
      , prohibited_outer_forks
      FROM saml_providers
    export_schema: 'gitlab_com'
    export_table: 'saml_providers'
    export_table_primary_key: id
  snippets:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , title
      , content
      , author_id
      , project_id
      , created_at
      , updated_at
      , file_name
      , type
      , visibility_level
      FROM snippets
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'snippets'
    export_table_primary_key: id
  subscriptions:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , subscribable_id
      , subscribable_type
      , subscribed
      , created_at
      , updated_at
      , project_id
      FROM subscriptions
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'subscriptions'
    export_table_primary_key: id
  programming_languages:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , name
      FROM programming_languages
    export_schema: 'gitlab_com'
    export_table: 'programming_languages'
    export_table_primary_key: id
  protected_environments:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , created_at
      , updated_at
      , name
      FROM protected_environments
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'protected_environments'
    export_table_primary_key: id
    advanced_metadata: true
  repository_languages:
    import_db: GITLAB_DB
    import_query: >
      SELECT project_id
      , programming_language_id
      , share
      , CONCAT(project_id, '_', programming_language_id) AS project_programming_language_id
      FROM repository_languages
    export_schema: 'gitlab_com'
    export_table: 'repository_languages'
    export_table_primary_key: CONCAT(project_id, '_', programming_language_id)
    advanced_metadata: true
  releases:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , tag
      , description
      , project_id
      , created_at
      , updated_at
      , author_id
      , sha
      FROM releases
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'releases'
    export_table_primary_key: id
  routes:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , source_id
      , source_type
      , path
      , created_at
      , updated_at
      FROM routes
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'routes'
    export_table_primary_key: id
  services:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , type
      , title
      , project_id
      , created_at
      , updated_at
      , active
      , properties
      , template
      , push_events
      , issues_events
      , merge_requests_events
      , tag_push_events
      , note_events
      , category
      , wiki_page_events
      , pipeline_events
      , confidential_issues_events
      , commit_events
      , job_events
      , confidential_note_events
      , deployment_events
      , comment_on_event_enabled
      FROM services
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'services'
    export_table_primary_key: id
  timelogs:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , time_spent
      , user_id
      , created_at
      , updated_at
      , issue_id
      , merge_request_id
      , CASE WHEN spent_at < '1970-01-01' THEN NULL ELSE spent_at END AS spent_at
      FROM timelogs
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'timelogs'
    export_table_primary_key: id
  todos:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , project_id
      , target_id
      , target_type
      , author_id
      , action
      , state
      , created_at
      , updated_at
      , note_id
      , commit_id
      , group_id
      FROM todos
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'todos'
    export_table_primary_key: id
  users:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , remember_created_at
      , sign_in_count
      , current_sign_in_at
      , last_sign_in_at
      , current_sign_in_ip
      , last_sign_in_ip
      , created_at
      , updated_at
      , name
      , admin
      , projects_limit
      , failed_attempts
      , locked_at
      , can_create_group
      , can_create_team
      , state
      , color_scheme_id
      , password_expires_at
      , created_by_id
      , last_credential_check_at
      , avatar
      , confirmed_at
      , confirmation_sent_at
      , unconfirmed_email
      , hide_no_ssh_key
      , website_url
      , admin_email_unsubscribed_at
      , notification_email
      , hide_no_password
      , password_automatically_set
      , location
      , public_email
      , dashboard
      , project_view
      , consumed_timestep
      , layout
      , hide_project_limit
      , note
      , otp_grace_period_started_at
      , external
      , organization
      , auditor
      , require_two_factor_authentication_from_group
      , two_factor_grace_period
      , last_activity_on
      , notified_of_own_activity
      , preferred_language
      , theme_id
      , accepted_term_id
      , private_profile
      , roadmap_layout
      , include_private_contributions
      , group_view
      , managing_group_id
      , "role"
      , username
      , first_name
      , last_name
      FROM users
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'users'
    export_table_primary_key: id
  user_preferences:
    import_db: GITLAB_DB
    import_query: >
      SELECT user_id
      , issue_notes_filter
      , merge_request_notes_filter
      , created_at
      , updated_at
      , epics_sort
      , roadmap_epics_state
      , epic_notes_filter
      , issues_sort
      , merge_requests_sort
      , roadmaps_sort
      , first_day_of_week
      , timezone
      , time_display_relative
      , time_format_in_24h
      , projects_sort
      , show_whitespace_in_diffs
      , sourcegraph_enabled
      , setup_for_company
      , render_whitespace_in_code
      , tab_width
      , feature_filter_type
      FROM user_preferences
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'user_preferences'
    export_table_primary_key: user_id
  vulnerabilities:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      FROM vulnerabilities
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerabilities'
    export_table_primary_key: id
  vulnerability_feedback:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , feedback_type
      , category
      , project_id
      , author_id
      , pipeline_id
      , issue_id
      , project_fingerprint
      , merge_request_id
      , comment_author_id
      , comment
      , comment_timestamp
      FROM vulnerability_feedback
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_feedback'
    export_table_primary_key: id
  vulnerability_identifiers:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , project_id
      , external_type
      , external_id
      , name
      , url
      FROM vulnerability_identifiers
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_identifiers'
    export_table_primary_key: id
  vulnerability_issue_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , vulnerability_id
      , issue_id
      , link_type
      , created_at
      , updated_at
      FROM vulnerability_issue_links
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_issue_links'
    export_table_primary_key: id
  vulnerability_occurrences:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , severity
      , confidence
      , report_type
      , project_id
      , scanner_id
      , primary_identifier_id
      , uuid
      , name
      , metadata_version
      , raw_metadata
      , vulnerability_id
      FROM vulnerability_occurrences
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_occurrences'
    export_table_primary_key: 'id'
  vulnerability_occurrence_identifiers:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , occurrence_id
      , identifier_id
      FROM vulnerability_occurrence_identifiers
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_occurrence_identifiers'
    export_table_primary_key: id
  vulnerability_occurrence_pipelines:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , occurrence_id
      , pipeline_id
      FROM vulnerability_occurrence_pipelines
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_occurrence_pipelines'
    export_table_primary_key: id
  vulnerability_scanners:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , project_id
      , external_id
      , name
      FROM vulnerability_scanners
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'vulnerability_scanners'
    export_table_primary_key: id
#   web_hook_logs:  # breaking extract 04-23-2020
#     import_db: GITLAB_DB
#     import_query: >
#       SELECT id
#       , web_hook_id
#       , trigger
#       , url
#       , request_headers
#       , request_data
#       , response_headers
#       , response_body
#       , response_status
#       , execution_duration
#       , internal_error_message
#       , created_at
#       , updated_at
#       FROM web_hook_logs
#       WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
#         AND '{EXECUTION_DATE}'::timestamp
#     export_schema: 'gitlab_dotcom'
#     export_table: web_hook_logs
#     export_table_primary_key: id
  web_hooks:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , created_at
      , updated_at
      , type
      , service_id
      FROM web_hooks
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: web_hooks
    export_table_primary_key: id
  ci_group_variables:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , key
      , group_id
      , created_at
      , updated_at
      , masked
      , variable_type
      FROM ci_group_variables
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_group_variables
    export_table_primary_key: id
  ci_builds_runner_session:
    import_db: GITLAB_DB
    import_query: >
      SELECT build_id
      , url
      , certificate
      , "authorization"
      FROM ci_builds_runner_session
    export_schema: 'gitlab_dotcom'
    export_table: ci_builds_runner_session
    export_table_primary_key: build_id
  ci_builds:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , status
      , finished_at
      , trace
      , created_at
      , updated_at
      , started_at
      , runner_id
      , coverage
      , commit_id
      , commands
      , name
      , options
      , allow_failure
      , stage
      , trigger_request_id
      , stage_idx
      , tag
      , ref
      , user_id
      , type
      , target_url
      , description
      , artifacts_file
      , project_id
      , artifacts_metadata
      , erased_by_id
      , erased_at
      , CASE WHEN artifacts_expire_at > '2262-01-01' THEN '2262-01-01' ELSE artifacts_expire_at END AS artifacts_expire_at
      , environment
      , artifacts_size
      , "when"
      , yaml_variables
      , queued_at
      , lock_version
      , coverage_regex
      , auto_canceled_by_id
      , retried
      , stage_id
      , artifacts_file_store
      , artifacts_metadata_store
      , protected
      , failure_reason
      , scheduled_at
      , upstream_pipeline_id
      FROM ci_builds
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_builds
    export_table_primary_key: id
  ci_runners:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , created_at
      , updated_at
      , description
      , contacted_at
      , active
      , is_shared
      , name
      , version
      , revision
      , platform
      , architecture
      , run_untagged
      , locked
      , access_level
      , ip_address
      , maximum_timeout
      , runner_type
      FROM ci_runners
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_runners
    export_table_primary_key: id
  ci_runner_projects:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , runner_id
      , created_at
      , updated_at
      , project_id
      FROM ci_runner_projects
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_runner_projects
    export_table_primary_key: id
